package com.jf.model;

import java.util.ArrayList;
import java.util.List;

public class JFTeacherMarkExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public JFTeacherMarkExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andStuIdIsNull() {
            addCriterion("stu_id is null");
            return (Criteria) this;
        }

        public Criteria andStuIdIsNotNull() {
            addCriterion("stu_id is not null");
            return (Criteria) this;
        }

        public Criteria andStuIdEqualTo(String value) {
            addCriterion("stu_id =", value, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdNotEqualTo(String value) {
            addCriterion("stu_id <>", value, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdGreaterThan(String value) {
            addCriterion("stu_id >", value, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdGreaterThanOrEqualTo(String value) {
            addCriterion("stu_id >=", value, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdLessThan(String value) {
            addCriterion("stu_id <", value, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdLessThanOrEqualTo(String value) {
            addCriterion("stu_id <=", value, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdLike(String value) {
            addCriterion("stu_id like", value, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdNotLike(String value) {
            addCriterion("stu_id not like", value, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdIn(List<String> values) {
            addCriterion("stu_id in", values, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdNotIn(List<String> values) {
            addCriterion("stu_id not in", values, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdBetween(String value1, String value2) {
            addCriterion("stu_id between", value1, value2, "stuId");
            return (Criteria) this;
        }

        public Criteria andStuIdNotBetween(String value1, String value2) {
            addCriterion("stu_id not between", value1, value2, "stuId");
            return (Criteria) this;
        }

        public Criteria andTeaIdIsNull() {
            addCriterion("tea_id is null");
            return (Criteria) this;
        }

        public Criteria andTeaIdIsNotNull() {
            addCriterion("tea_id is not null");
            return (Criteria) this;
        }

        public Criteria andTeaIdEqualTo(String value) {
            addCriterion("tea_id =", value, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdNotEqualTo(String value) {
            addCriterion("tea_id <>", value, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdGreaterThan(String value) {
            addCriterion("tea_id >", value, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdGreaterThanOrEqualTo(String value) {
            addCriterion("tea_id >=", value, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdLessThan(String value) {
            addCriterion("tea_id <", value, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdLessThanOrEqualTo(String value) {
            addCriterion("tea_id <=", value, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdLike(String value) {
            addCriterion("tea_id like", value, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdNotLike(String value) {
            addCriterion("tea_id not like", value, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdIn(List<String> values) {
            addCriterion("tea_id in", values, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdNotIn(List<String> values) {
            addCriterion("tea_id not in", values, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdBetween(String value1, String value2) {
            addCriterion("tea_id between", value1, value2, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaIdNotBetween(String value1, String value2) {
            addCriterion("tea_id not between", value1, value2, "teaId");
            return (Criteria) this;
        }

        public Criteria andTeaAIsNull() {
            addCriterion("tea_a is null");
            return (Criteria) this;
        }

        public Criteria andTeaAIsNotNull() {
            addCriterion("tea_a is not null");
            return (Criteria) this;
        }

        public Criteria andTeaAEqualTo(Integer value) {
            addCriterion("tea_a =", value, "teaA");
            return (Criteria) this;
        }

        public Criteria andTeaANotEqualTo(Integer value) {
            addCriterion("tea_a <>", value, "teaA");
            return (Criteria) this;
        }

        public Criteria andTeaAGreaterThan(Integer value) {
            addCriterion("tea_a >", value, "teaA");
            return (Criteria) this;
        }

        public Criteria andTeaAGreaterThanOrEqualTo(Integer value) {
            addCriterion("tea_a >=", value, "teaA");
            return (Criteria) this;
        }

        public Criteria andTeaALessThan(Integer value) {
            addCriterion("tea_a <", value, "teaA");
            return (Criteria) this;
        }

        public Criteria andTeaALessThanOrEqualTo(Integer value) {
            addCriterion("tea_a <=", value, "teaA");
            return (Criteria) this;
        }

        public Criteria andTeaAIn(List<Integer> values) {
            addCriterion("tea_a in", values, "teaA");
            return (Criteria) this;
        }

        public Criteria andTeaANotIn(List<Integer> values) {
            addCriterion("tea_a not in", values, "teaA");
            return (Criteria) this;
        }

        public Criteria andTeaABetween(Integer value1, Integer value2) {
            addCriterion("tea_a between", value1, value2, "teaA");
            return (Criteria) this;
        }

        public Criteria andTeaANotBetween(Integer value1, Integer value2) {
            addCriterion("tea_a not between", value1, value2, "teaA");
            return (Criteria) this;
        }

        public Criteria andTeaBIsNull() {
            addCriterion("tea_b is null");
            return (Criteria) this;
        }

        public Criteria andTeaBIsNotNull() {
            addCriterion("tea_b is not null");
            return (Criteria) this;
        }

        public Criteria andTeaBEqualTo(Integer value) {
            addCriterion("tea_b =", value, "teaB");
            return (Criteria) this;
        }

        public Criteria andTeaBNotEqualTo(Integer value) {
            addCriterion("tea_b <>", value, "teaB");
            return (Criteria) this;
        }

        public Criteria andTeaBGreaterThan(Integer value) {
            addCriterion("tea_b >", value, "teaB");
            return (Criteria) this;
        }

        public Criteria andTeaBGreaterThanOrEqualTo(Integer value) {
            addCriterion("tea_b >=", value, "teaB");
            return (Criteria) this;
        }

        public Criteria andTeaBLessThan(Integer value) {
            addCriterion("tea_b <", value, "teaB");
            return (Criteria) this;
        }

        public Criteria andTeaBLessThanOrEqualTo(Integer value) {
            addCriterion("tea_b <=", value, "teaB");
            return (Criteria) this;
        }

        public Criteria andTeaBIn(List<Integer> values) {
            addCriterion("tea_b in", values, "teaB");
            return (Criteria) this;
        }

        public Criteria andTeaBNotIn(List<Integer> values) {
            addCriterion("tea_b not in", values, "teaB");
            return (Criteria) this;
        }

        public Criteria andTeaBBetween(Integer value1, Integer value2) {
            addCriterion("tea_b between", value1, value2, "teaB");
            return (Criteria) this;
        }

        public Criteria andTeaBNotBetween(Integer value1, Integer value2) {
            addCriterion("tea_b not between", value1, value2, "teaB");
            return (Criteria) this;
        }

        public Criteria andTeaCIsNull() {
            addCriterion("tea_c is null");
            return (Criteria) this;
        }

        public Criteria andTeaCIsNotNull() {
            addCriterion("tea_c is not null");
            return (Criteria) this;
        }

        public Criteria andTeaCEqualTo(Integer value) {
            addCriterion("tea_c =", value, "teaC");
            return (Criteria) this;
        }

        public Criteria andTeaCNotEqualTo(Integer value) {
            addCriterion("tea_c <>", value, "teaC");
            return (Criteria) this;
        }

        public Criteria andTeaCGreaterThan(Integer value) {
            addCriterion("tea_c >", value, "teaC");
            return (Criteria) this;
        }

        public Criteria andTeaCGreaterThanOrEqualTo(Integer value) {
            addCriterion("tea_c >=", value, "teaC");
            return (Criteria) this;
        }

        public Criteria andTeaCLessThan(Integer value) {
            addCriterion("tea_c <", value, "teaC");
            return (Criteria) this;
        }

        public Criteria andTeaCLessThanOrEqualTo(Integer value) {
            addCriterion("tea_c <=", value, "teaC");
            return (Criteria) this;
        }

        public Criteria andTeaCIn(List<Integer> values) {
            addCriterion("tea_c in", values, "teaC");
            return (Criteria) this;
        }

        public Criteria andTeaCNotIn(List<Integer> values) {
            addCriterion("tea_c not in", values, "teaC");
            return (Criteria) this;
        }

        public Criteria andTeaCBetween(Integer value1, Integer value2) {
            addCriterion("tea_c between", value1, value2, "teaC");
            return (Criteria) this;
        }

        public Criteria andTeaCNotBetween(Integer value1, Integer value2) {
            addCriterion("tea_c not between", value1, value2, "teaC");
            return (Criteria) this;
        }

        public Criteria andTeaDIsNull() {
            addCriterion("tea_d is null");
            return (Criteria) this;
        }

        public Criteria andTeaDIsNotNull() {
            addCriterion("tea_d is not null");
            return (Criteria) this;
        }

        public Criteria andTeaDEqualTo(Integer value) {
            addCriterion("tea_d =", value, "teaD");
            return (Criteria) this;
        }

        public Criteria andTeaDNotEqualTo(Integer value) {
            addCriterion("tea_d <>", value, "teaD");
            return (Criteria) this;
        }

        public Criteria andTeaDGreaterThan(Integer value) {
            addCriterion("tea_d >", value, "teaD");
            return (Criteria) this;
        }

        public Criteria andTeaDGreaterThanOrEqualTo(Integer value) {
            addCriterion("tea_d >=", value, "teaD");
            return (Criteria) this;
        }

        public Criteria andTeaDLessThan(Integer value) {
            addCriterion("tea_d <", value, "teaD");
            return (Criteria) this;
        }

        public Criteria andTeaDLessThanOrEqualTo(Integer value) {
            addCriterion("tea_d <=", value, "teaD");
            return (Criteria) this;
        }

        public Criteria andTeaDIn(List<Integer> values) {
            addCriterion("tea_d in", values, "teaD");
            return (Criteria) this;
        }

        public Criteria andTeaDNotIn(List<Integer> values) {
            addCriterion("tea_d not in", values, "teaD");
            return (Criteria) this;
        }

        public Criteria andTeaDBetween(Integer value1, Integer value2) {
            addCriterion("tea_d between", value1, value2, "teaD");
            return (Criteria) this;
        }

        public Criteria andTeaDNotBetween(Integer value1, Integer value2) {
            addCriterion("tea_d not between", value1, value2, "teaD");
            return (Criteria) this;
        }

        public Criteria andTeaEIsNull() {
            addCriterion("tea_e is null");
            return (Criteria) this;
        }

        public Criteria andTeaEIsNotNull() {
            addCriterion("tea_e is not null");
            return (Criteria) this;
        }

        public Criteria andTeaEEqualTo(Integer value) {
            addCriterion("tea_e =", value, "teaE");
            return (Criteria) this;
        }

        public Criteria andTeaENotEqualTo(Integer value) {
            addCriterion("tea_e <>", value, "teaE");
            return (Criteria) this;
        }

        public Criteria andTeaEGreaterThan(Integer value) {
            addCriterion("tea_e >", value, "teaE");
            return (Criteria) this;
        }

        public Criteria andTeaEGreaterThanOrEqualTo(Integer value) {
            addCriterion("tea_e >=", value, "teaE");
            return (Criteria) this;
        }

        public Criteria andTeaELessThan(Integer value) {
            addCriterion("tea_e <", value, "teaE");
            return (Criteria) this;
        }

        public Criteria andTeaELessThanOrEqualTo(Integer value) {
            addCriterion("tea_e <=", value, "teaE");
            return (Criteria) this;
        }

        public Criteria andTeaEIn(List<Integer> values) {
            addCriterion("tea_e in", values, "teaE");
            return (Criteria) this;
        }

        public Criteria andTeaENotIn(List<Integer> values) {
            addCriterion("tea_e not in", values, "teaE");
            return (Criteria) this;
        }

        public Criteria andTeaEBetween(Integer value1, Integer value2) {
            addCriterion("tea_e between", value1, value2, "teaE");
            return (Criteria) this;
        }

        public Criteria andTeaENotBetween(Integer value1, Integer value2) {
            addCriterion("tea_e not between", value1, value2, "teaE");
            return (Criteria) this;
        }

        public Criteria andTeaFIsNull() {
            addCriterion("tea_f is null");
            return (Criteria) this;
        }

        public Criteria andTeaFIsNotNull() {
            addCriterion("tea_f is not null");
            return (Criteria) this;
        }

        public Criteria andTeaFEqualTo(Integer value) {
            addCriterion("tea_f =", value, "teaF");
            return (Criteria) this;
        }

        public Criteria andTeaFNotEqualTo(Integer value) {
            addCriterion("tea_f <>", value, "teaF");
            return (Criteria) this;
        }

        public Criteria andTeaFGreaterThan(Integer value) {
            addCriterion("tea_f >", value, "teaF");
            return (Criteria) this;
        }

        public Criteria andTeaFGreaterThanOrEqualTo(Integer value) {
            addCriterion("tea_f >=", value, "teaF");
            return (Criteria) this;
        }

        public Criteria andTeaFLessThan(Integer value) {
            addCriterion("tea_f <", value, "teaF");
            return (Criteria) this;
        }

        public Criteria andTeaFLessThanOrEqualTo(Integer value) {
            addCriterion("tea_f <=", value, "teaF");
            return (Criteria) this;
        }

        public Criteria andTeaFIn(List<Integer> values) {
            addCriterion("tea_f in", values, "teaF");
            return (Criteria) this;
        }

        public Criteria andTeaFNotIn(List<Integer> values) {
            addCriterion("tea_f not in", values, "teaF");
            return (Criteria) this;
        }

        public Criteria andTeaFBetween(Integer value1, Integer value2) {
            addCriterion("tea_f between", value1, value2, "teaF");
            return (Criteria) this;
        }

        public Criteria andTeaFNotBetween(Integer value1, Integer value2) {
            addCriterion("tea_f not between", value1, value2, "teaF");
            return (Criteria) this;
        }

        public Criteria andTeaGIsNull() {
            addCriterion("tea_g is null");
            return (Criteria) this;
        }

        public Criteria andTeaGIsNotNull() {
            addCriterion("tea_g is not null");
            return (Criteria) this;
        }

        public Criteria andTeaGEqualTo(Integer value) {
            addCriterion("tea_g =", value, "teaG");
            return (Criteria) this;
        }

        public Criteria andTeaGNotEqualTo(Integer value) {
            addCriterion("tea_g <>", value, "teaG");
            return (Criteria) this;
        }

        public Criteria andTeaGGreaterThan(Integer value) {
            addCriterion("tea_g >", value, "teaG");
            return (Criteria) this;
        }

        public Criteria andTeaGGreaterThanOrEqualTo(Integer value) {
            addCriterion("tea_g >=", value, "teaG");
            return (Criteria) this;
        }

        public Criteria andTeaGLessThan(Integer value) {
            addCriterion("tea_g <", value, "teaG");
            return (Criteria) this;
        }

        public Criteria andTeaGLessThanOrEqualTo(Integer value) {
            addCriterion("tea_g <=", value, "teaG");
            return (Criteria) this;
        }

        public Criteria andTeaGIn(List<Integer> values) {
            addCriterion("tea_g in", values, "teaG");
            return (Criteria) this;
        }

        public Criteria andTeaGNotIn(List<Integer> values) {
            addCriterion("tea_g not in", values, "teaG");
            return (Criteria) this;
        }

        public Criteria andTeaGBetween(Integer value1, Integer value2) {
            addCriterion("tea_g between", value1, value2, "teaG");
            return (Criteria) this;
        }

        public Criteria andTeaGNotBetween(Integer value1, Integer value2) {
            addCriterion("tea_g not between", value1, value2, "teaG");
            return (Criteria) this;
        }

        public Criteria andBack8IsNull() {
            addCriterion("back8 is null");
            return (Criteria) this;
        }

        public Criteria andBack8IsNotNull() {
            addCriterion("back8 is not null");
            return (Criteria) this;
        }

        public Criteria andBack8EqualTo(Integer value) {
            addCriterion("back8 =", value, "back8");
            return (Criteria) this;
        }

        public Criteria andBack8NotEqualTo(Integer value) {
            addCriterion("back8 <>", value, "back8");
            return (Criteria) this;
        }

        public Criteria andBack8GreaterThan(Integer value) {
            addCriterion("back8 >", value, "back8");
            return (Criteria) this;
        }

        public Criteria andBack8GreaterThanOrEqualTo(Integer value) {
            addCriterion("back8 >=", value, "back8");
            return (Criteria) this;
        }

        public Criteria andBack8LessThan(Integer value) {
            addCriterion("back8 <", value, "back8");
            return (Criteria) this;
        }

        public Criteria andBack8LessThanOrEqualTo(Integer value) {
            addCriterion("back8 <=", value, "back8");
            return (Criteria) this;
        }

        public Criteria andBack8In(List<Integer> values) {
            addCriterion("back8 in", values, "back8");
            return (Criteria) this;
        }

        public Criteria andBack8NotIn(List<Integer> values) {
            addCriterion("back8 not in", values, "back8");
            return (Criteria) this;
        }

        public Criteria andBack8Between(Integer value1, Integer value2) {
            addCriterion("back8 between", value1, value2, "back8");
            return (Criteria) this;
        }

        public Criteria andBack8NotBetween(Integer value1, Integer value2) {
            addCriterion("back8 not between", value1, value2, "back8");
            return (Criteria) this;
        }

        public Criteria andBack9IsNull() {
            addCriterion("back9 is null");
            return (Criteria) this;
        }

        public Criteria andBack9IsNotNull() {
            addCriterion("back9 is not null");
            return (Criteria) this;
        }

        public Criteria andBack9EqualTo(Integer value) {
            addCriterion("back9 =", value, "back9");
            return (Criteria) this;
        }

        public Criteria andBack9NotEqualTo(Integer value) {
            addCriterion("back9 <>", value, "back9");
            return (Criteria) this;
        }

        public Criteria andBack9GreaterThan(Integer value) {
            addCriterion("back9 >", value, "back9");
            return (Criteria) this;
        }

        public Criteria andBack9GreaterThanOrEqualTo(Integer value) {
            addCriterion("back9 >=", value, "back9");
            return (Criteria) this;
        }

        public Criteria andBack9LessThan(Integer value) {
            addCriterion("back9 <", value, "back9");
            return (Criteria) this;
        }

        public Criteria andBack9LessThanOrEqualTo(Integer value) {
            addCriterion("back9 <=", value, "back9");
            return (Criteria) this;
        }

        public Criteria andBack9In(List<Integer> values) {
            addCriterion("back9 in", values, "back9");
            return (Criteria) this;
        }

        public Criteria andBack9NotIn(List<Integer> values) {
            addCriterion("back9 not in", values, "back9");
            return (Criteria) this;
        }

        public Criteria andBack9Between(Integer value1, Integer value2) {
            addCriterion("back9 between", value1, value2, "back9");
            return (Criteria) this;
        }

        public Criteria andBack9NotBetween(Integer value1, Integer value2) {
            addCriterion("back9 not between", value1, value2, "back9");
            return (Criteria) this;
        }

        public Criteria andBack10IsNull() {
            addCriterion("back10 is null");
            return (Criteria) this;
        }

        public Criteria andBack10IsNotNull() {
            addCriterion("back10 is not null");
            return (Criteria) this;
        }

        public Criteria andBack10EqualTo(Integer value) {
            addCriterion("back10 =", value, "back10");
            return (Criteria) this;
        }

        public Criteria andBack10NotEqualTo(Integer value) {
            addCriterion("back10 <>", value, "back10");
            return (Criteria) this;
        }

        public Criteria andBack10GreaterThan(Integer value) {
            addCriterion("back10 >", value, "back10");
            return (Criteria) this;
        }

        public Criteria andBack10GreaterThanOrEqualTo(Integer value) {
            addCriterion("back10 >=", value, "back10");
            return (Criteria) this;
        }

        public Criteria andBack10LessThan(Integer value) {
            addCriterion("back10 <", value, "back10");
            return (Criteria) this;
        }

        public Criteria andBack10LessThanOrEqualTo(Integer value) {
            addCriterion("back10 <=", value, "back10");
            return (Criteria) this;
        }

        public Criteria andBack10In(List<Integer> values) {
            addCriterion("back10 in", values, "back10");
            return (Criteria) this;
        }

        public Criteria andBack10NotIn(List<Integer> values) {
            addCriterion("back10 not in", values, "back10");
            return (Criteria) this;
        }

        public Criteria andBack10Between(Integer value1, Integer value2) {
            addCriterion("back10 between", value1, value2, "back10");
            return (Criteria) this;
        }

        public Criteria andBack10NotBetween(Integer value1, Integer value2) {
            addCriterion("back10 not between", value1, value2, "back10");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table teachermark
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table teachermark
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value) {
            super();
            this.condition = condition;
            this.value = value;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.betweenValue = true;
        }
    }
}